{"version":3,"sources":["components/Header.js","components/GameWrapper.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","GameWrapper","props","children","Card","id","onClick","handleClick","alt","src","image","App","state","cards","cardsData","score","winStatus","i","length","click","clickedNum","cardsShuff","shuffleData","setState","checkScore","gameLost","data","j","Math","floor","random","temp","handleClickReset","this","map","card","key","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ohEAaeA,MAXf,WACI,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,6BACA,uBAAGA,UAAU,QAAb,qHCDDC,MAJf,SAAqBC,GACnB,OAAO,yBAAKF,UAAU,WAAWE,EAAMC,W,OCiB1BC,MAlBf,SAAcF,GACV,OACI,4BAAQF,UAAU,OAAOK,GAAIH,EAAMG,GAAIC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMG,MAC1E,yBAAKL,UAAU,iBACX,yBAAKQ,IAAKN,EAAMG,GAAII,IAAKP,EAAMQ,WC0GhCC,E,4MAtGbC,MAAQ,CACNC,MAAOC,EACPC,MAAO,EACPC,UAAW,I,EAIbT,YAAc,SAACF,GAIb,IAHA,IAAIQ,EAAQ,EAAKD,MAAMC,MACnBE,EAAQ,EAAKH,MAAMG,MAEdE,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAChC,GAAIJ,EAAMI,GAAGZ,KAAOA,EAClB,IAAuB,IAAnBQ,EAAMI,GAAGE,MAAiB,CAC5BN,EAAMI,GAAGE,OAAQ,EACjBN,EAAMI,GAAGG,aACTL,IACA,IAAIM,EAAa,EAAKC,YAAYT,GAClC,EAAKU,SAAS,CAAEV,MAAOQ,EAAYN,MAAOA,IAC1C,EAAKS,WAAWT,QACY,IAAnBF,EAAMI,GAAGE,OAClBN,EAAMI,GAAGG,aAMf,IAAK,IAAIH,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAC5BJ,EAAMI,GAAGZ,KAAOA,GACdQ,EAAMI,GAAGG,WAAa,GACxB,EAAKK,Y,EAMbH,YAAc,SAAAI,GAEZ,IADA,IAAIT,EAAIS,EAAKR,OAAS,EACfD,EAAI,GAAG,CACZ,IAAMU,EAAIC,KAAKC,MAAMD,KAAKE,UAAYb,EAAI,IACpCc,EAAOL,EAAKT,GAClBS,EAAKT,GAAKS,EAAKC,GACfD,EAAKC,GAAKI,EACVd,IAEF,OAAOS,G,EAGTF,WAAa,SAACT,GACE,KAAVA,GACF,EAAKQ,SAAS,CAAEP,UAAW,0B,EAI/BS,SAAW,WAET,EAAKF,SAAS,CAAER,MAAO,EAAGC,UAAW,mE,EAGvCgB,iBAAmB,WAGjB,IADA,IAAInB,EAAQ,EAAKD,MAAMC,MACdI,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAChCJ,EAAMI,GAAGE,OAAQ,EACjBN,EAAMI,GAAGG,WAAa,EAGxB,EAAKG,SACH,CACEV,MAAOA,EACPE,MAAO,EACPC,UAAW,M,uDAOP,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,MACA,6CAAmBiB,KAAKrB,MAAMG,OAC9B,2BAAIkB,KAAKrB,MAAMI,WACf,4BAAQV,QAAS2B,KAAKD,kBAAtB,cACA,kBAAC,EAAD,KACGC,KAAKrB,MAAMC,MAAMqB,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACE9B,GAAI8B,EAAK9B,GACT+B,IAAKD,EAAK9B,GACVK,MAAOyB,EAAKzB,MACZ2B,KAAMF,EAAKE,KACXjB,WAAYe,EAAKf,WACjBb,YAAa,EAAKA,uB,GA9Fd+B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df1ba20b.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Are you a Pokemon Master?</h1>\n                <p className=\"lead\">This is a memory game. Click a Pokemon once, your score goes up. Click it twice, start again from Pallet Town!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction GameWrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default GameWrapper;\n","import React from 'react';\n\nfunction Card(props) {\n    return (\n        <button className='card' id={props.id} onClick={() => props.handleClick(props.id)}>\n            <div className='img-container'>\n                <img alt={props.id} src={props.image}/>\n            </div>\n            {/* <div className='content'>\n                <ul>\n                    <li>Card Id Test: {props.id}</li>\n                </ul>\n            </div> */}\n            {/* <button>Click here</button> */}\n            {/* <button onClick={props.handleClick(props.card.id)}><img src={props.card.image}></img></button> */}\n            {/* <img src={props.card.image} onClick={props.handleClick(props.card.id)}></img> */}\n        </button>\n    )\n}\n\nexport default Card;","// import React from 'react';\nimport React, { Component } from 'react';\nimport './App.css';\n// import Navbar from './components/Navbar';\nimport Header from './components/Header';\nimport GameWrapper from './components/GameWrapper';\nimport cardsData from '../src/CardArray.json';\nimport Card from './components/Card';\n\nclass App extends Component {\n  state = {\n    cards: cardsData,\n    score: 0,\n    winStatus: \"\"\n    // topScore: 0\n  };\n\n  handleClick = (id) => {\n    var cards = this.state.cards\n    var score = this.state.score\n    // var topScore = this.state.topScore\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i].id === id) {\n        if (cards[i].click === false) {\n          cards[i].click = true;\n          cards[i].clickedNum++;\n          score++;\n          var cardsShuff = this.shuffleData(cards);\n          this.setState({ cards: cardsShuff, score: score })\n          this.checkScore(score)\n        } else if (cards[i].click === true) {\n          cards[i].clickedNum++;\n        }\n      }\n    }\n    // this.setState({ cards: cardsShuff, score: score })\n    // this.checkScore(score)\n    for (let i = 0; i < cards.length; i++) {\n      if (cards[i].id === id) {\n        if (cards[i].clickedNum > 2){\n          this.gameLost();\n        }\n      }\n    }\n  }\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  checkScore = (score) => {\n    if (score === 12) {\n      this.setState({ winStatus: \"You won, Pokedexter!\" })\n    }\n  }\n\n  gameLost = () => {\n    // set winStatus to some sort of try again message\n    this.setState({ score: 0, winStatus: \"You chose that Pokemon already, start again from Pallet Town!\"})\n  }\n\n  handleClickReset = () => {\n\n    var cards = this.state.cards\n    for (let i = 0; i < cards.length; i++) {\n      cards[i].click = false;\n      cards[i].clickedNum = 0;\n    }\n\n    this.setState(\n      {\n        cards: cards,\n        score: 0,\n        winStatus: \"\"\n      }\n    )\n\n  }\n\n\n  render() {\n    return (\n      <>\n        <Header />\n        <p>Current Score: {this.state.score}</p>\n        <p>{this.state.winStatus}</p>\n        <button onClick={this.handleClickReset}>Reset Game</button>\n        <GameWrapper>\n          {this.state.cards.map(card => (\n            <Card\n              id={card.id}\n              key={card.id}\n              image={card.image}\n              name={card.name}\n              clickedNum={card.clickedNum}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </GameWrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Header />\n//       {/* <Game /> */}\n//       <Footer />\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}